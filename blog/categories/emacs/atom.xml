<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: emacs | A Riddle Wrapped in a Mystery]]></title>
  <link href="http://kawabata.github.com/blog/categories/emacs/atom.xml" rel="self"/>
  <link href="http://kawabata.github.com/"/>
  <updated>2013-04-01T13:18:16+09:00</updated>
  <id>http://kawabata.github.com/</id>
  <author>
    <name><![CDATA[dotabata]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[数学用アルファベットをEmacsで入力する。]]></title>
    <link href="http://kawabata.github.com/blog/2013-03-23-math-symbols.html"/>
    <updated>2013-03-23T23:00:00+09:00</updated>
    <id>http://kawabata.github.com/blog/math-symbols</id>
    <content type="html"><![CDATA[<p>
Emacs Lisp の <a href="http://github.com/kawabata/math-symbols">math-symbols.el</a> は、通常の文字をイタリック文字やフラク
トゥール文字へ変換できる。
</p>




<div id="outline-container-1" class="outline-2">
<h2 id="sec-1">Unicode の数学文字</h2>
<div class="outline-text-2" id="text-1">
<p>
通常、イタリックや太字は文字符号ではなくフォントで区別するが、数式で使
う文字のイタリックや太字は意味的に異なるため、別の文字符号でこれらを扱う。
</p>

<p>
Unicode で符号化されているスタイルは以下のとおりである。
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides" >


<colgroup>
<col class="left"/>

<col class="left"/>

<col class="left"/>

<col class="left"/>
</colgroup>
<thead>
<tr>
<th scope="col" class="left">styles / scripts</th>
<th scope="col" class="left">alphabets</th>
<th scope="col" class="left">greeks*</th>
<th scope="col" class="left">numerals</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">bold</td>
<td class="left">yes</td>
<td class="left">yes</td>
<td class="left">yes</td>
</tr>

<tr>
<td class="left">(bold) italic</td>
<td class="left">yes</td>
<td class="left">yes</td>
<td class="left">yes</td>
</tr>

<tr>
<td class="left">(bold) fraktur</td>
<td class="left">yes</td>
<td class="left">no</td>
<td class="left">no</td>
</tr>

<tr>
<td class="left">(bold) script</td>
<td class="left">yes</td>
<td class="left">no</td>
<td class="left">no</td>
</tr>

<tr>
<td class="left">double-struck</td>
<td class="left">yes</td>
<td class="left">partial</td>
<td class="left">yes</td>
</tr>

<tr>
<td class="left">monospace</td>
<td class="left">yes</td>
<td class="left">no</td>
<td class="left">yes</td>
</tr>

<tr>
<td class="left">sans-serif (italic)</td>
<td class="left">yes</td>
<td class="left">no</td>
<td class="left">yes</td>
</tr>

<tr>
<td class="left">sans-serif bold (italic)</td>
<td class="left">yes</td>
<td class="left">yes</td>
<td class="left">yes</td>
</tr>

<tr>
<td class="left">subscript</td>
<td class="left">partial</td>
<td class="left">no</td>
<td class="left">yes</td>
</tr>

<tr>
<td class="left">superscript</td>
<td class="left">partial</td>
<td class="left">no</td>
<td class="left">yes</td>
</tr>
</tbody>
</table>

<p>
上の表において、アルファベットとは、大文字・小文字それぞれ２６文字ずつ
である。また、ギリシャ文字は全て数学用ギリシャ文字記号とナブラ（ϵ, ϑ,
ϰ, ϕ, ϱ, ϖ, ∇）を含む。
</p>
</div>
</div>


<div id="outline-container-2" class="outline-2">
<h2 id="sec-2">Unicode の符号とフォント</h2>
<div class="outline-text-2" id="text-2">
<p>
Unicode では、数学用文字の符号は　U+1D400 からの SMP面で符号化されてい
る。ただし、一部の早期にBMPで符号化されていた文字 (ℜなど) は別である。
</p>

<p>
数学記号フォントは <a href="http://en.wikipedia.org/wiki/STIX_Fonts_project">STIX Font Project</a> が開発したフォントが主要なOSにはす
でにインストール済である。
</p>
</div>
</div>


<div id="outline-container-3" class="outline-2">
<h2 id="sec-3">init.el の設定</h2>
<div class="outline-text-2" id="text-3">
<p>
単に <code>(require 'math-sybols)</code> でインストールされる。
</p>
</div>
</div>


<div id="outline-container-4" class="outline-2">
<h2 id="sec-4">文字のスタイル化</h2>
<div class="outline-text-2" id="text-4">
<p>
アルファベット等の文字をスタイル化したい場合は、領域を選択して、 <code>M-x
math-symbols-XXXX-region</code> を実行する。たとえば abcde を 太字イタリック
にしたい場合は、 <code>M-x math-symbols-bold-italic-region</code> とすれば良い。
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides" >


<colgroup>
<col class="left"/>

<col class="left"/>

<col class="left"/>
</colgroup>
<tbody>
<tr>
<td class="left">math-symbols-fraktur-region</td>
<td class="left">abcde</td>
<td class="left">𝔞𝔟𝔠𝔡𝔢</td>
</tr>

<tr>
<td class="left">math-symbols-bold-region</td>
<td class="left">abcde</td>
<td class="left">𝐚𝐛𝐜𝐝𝐞</td>
</tr>

<tr>
<td class="left">math-symbols-italic-region</td>
<td class="left">abcde</td>
<td class="left">𝑎𝑏𝑐𝑑𝑒</td>
</tr>

<tr>
<td class="left">math-symbols-script-region</td>
<td class="left">abcde</td>
<td class="left">𝒶𝒷𝒸𝒹ℯ</td>
</tr>

<tr>
<td class="left">math-symbols-double-struck-region</td>
<td class="left">abcde</td>
<td class="left">𝕒𝕓𝕔𝕕𝕖</td>
</tr>

<tr>
<td class="left">math-symbols-sans-serif-region</td>
<td class="left">abcde</td>
<td class="left">𝖺𝖻𝖼𝖽𝖾</td>
</tr>

<tr>
<td class="left">math-symbols-superscript-region</td>
<td class="left">12345</td>
<td class="left">¹²³⁴⁵</td>
</tr>
</tbody>
</table>

<p>
スタイル化した文字をもとに戻すには M-x ucs-normalize-NFKC-region を実行
する。文字列を変換するには、 <code>(math-symbols-italic-region "hogehoge")</code>
と実行する。文字列中に変換できない文字がある場合（空白含む）はエラーに
なるが、 <code>C-u</code> プレフィックスで抑制できる。
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(math-symbols-fraktur-string <span style="color: #ffa07a;">"fghijk"</span>) &#9166;
<span style="color: #ffa07a;">"&#120099;&#120100;&#120101;&#120102;&#120103;&#120104;"</span>
</pre>
</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs Lookup で Goo のWeb辞書を利用する。]]></title>
    <link href="http://kawabata.github.com/blog/2013-03-21-goo.html"/>
    <updated>2013-03-21T23:00:00+09:00</updated>
    <id>http://kawabata.github.com/blog/goo</id>
    <content type="html"><![CDATA[<p>
<a href="http://lookup2.github.com">Lookup</a> の ndweb エージェントクラスは、世界中にあるWeb上の辞書を利用できる。
</p>




<div id="outline-container-1" class="outline-2">
<h2 id="sec-1">ndwebのオプション</h2>
<div class="outline-text-2" id="text-1">
<p>
Lookup でWeb辞書を使用する場合は、以下のオプションを指定する。
</p>

<dl class="org-dl">
<dt> :self </dt><dd>OpenSearch Description URL
</dd>
<dt> :title </dt><dd>辞書のタイトル
</dd>
<dt> :methods </dt><dd>辞書の検索メソッド（前方一致など）
</dd>
<dt> :suggestions </dt><dd>候補の選択方法 （関数ならば HTMLファイルから候補を生成、URLならば OpenSearch JSON を指定する）
</dd>
<dt> :results </dt><dd>選択した候補の内容を表示する URL。
</dd>
<dt> :method </dt><dd>HTTP Post または Get のどちらを利用するか。
</dd>
</dl>

<p>
なお、:self が指定されているのならば、:title, :suggestions :results :methods 等のオプションの指定は必要ない。
これらは :self で指定された OpenSearch XML から自動的に取得される。逆に、:self がない場合は最低限、:title, 
と :results が必須になる。
</p>

<p>
<a href="http://mycroftproject.com/">Mycroft Project</a> では、全世界 2万以上の辞書の検索エンジンの OpenSearch
XML が蓄積されている。ndweb エージェントの位置に、"mycroft:XXX" を指定
すると、自動的に Mycroft のサイトからXXX の OpenSearch XML を取得して、
辞書を設定する。
</p>
</div>
</div>


<div id="outline-container-2" class="outline-2">
<h2 id="sec-2">ndweb-options</h2>
<div class="outline-text-2" id="text-2">
<p>
ndweb-options には、goo等のようないくつかのnewebエージェント用の独自オ
プションがプリセットされている。ndweb-options にあるWebサイトを使えば、
自分でオプションを設定する必要なく、すぐにそのWeb辞書を利用できる。
</p>
</div>
</div>


<div id="outline-container-3" class="outline-2">
<h2 id="sec-3">設定</h2>
<div class="outline-text-2" id="text-3">
<p>
ndweb-options.el を参考に、使用したいWeb辞書のURLの "<a href="http://">http://</a>" を除いた部分を指定する。
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(setq lookup-search-agents 
      '(...
        (ndweb <span style="color: #ffa07a;">"dictionary.goo.ne.jp/jc"</span>)
        ...))
</pre>
</div>


<div class="figure">
<p><img src="2013-03-21-goo.png"  alt="2013-03-21-goo.png"/></p>
</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs Lookup で Sony DD-CH10 の日中辞書を利用する。]]></title>
    <link href="http://kawabata.github.com/blog/2013-03-19-ddch10.html"/>
    <updated>2013-03-19T23:00:00+09:00</updated>
    <id>http://kawabata.github.com/blog/ddch10</id>
    <content type="html"><![CDATA[<p>
<i>Lookup</i> は、かつて Sony が発売していた電子辞書 <a href="http://www.sony.co.jp/SonyInfo/News/Press_Archive/199703/97CI-022/">DD-CH10</a> CD-ROMに入っていた小学館の日中・中日辞書が利用できる。
この辞書は語彙・例文が充実していて、発売後１５年が経過した今でも人気が高い。
</p>




<div id="outline-container-1" class="outline-2">
<h2 id="sec-1">EBXA-C</h2>
<div class="outline-text-2" id="text-1">
<p>
DD-CH10 は、電子辞書規格 EBXA を中国語向けに拡張した、これ一台限りの特別規格 EBXA-C を採用している。
この辞書の閲覧には、EBXA-C 対応のパッチを当てた <a href="http://ikazuhiro.s206.xrea.com/staticpages/index.php/eblook">eblook</a> を利用する。
</p>
</div>
</div>


<div id="outline-container-2" class="outline-2">
<h2 id="sec-2">漢字インデクサ</h2>
<div class="outline-text-2" id="text-2">
<p>
DD-CH10 の日中辞書は平仮名とピン音でしか検索できないが、<a href="http://www31.ocn.ne.jp/~h_ishida/EBKIdx.html">EB漢字インデクサ</a> 
を使用することで、漢字でも検索できるようになる。
</p>
</div>
</div>


<div id="outline-container-3" class="outline-2">
<h2 id="sec-3">ピン音フィルタ</h2>
<div class="outline-text-2" id="text-3">
<p>
Lookup の support-zhongri ファイルは、中国語の文字をピン音に直すクエリフィルタが組み込まれている。
このクエリフィルタが使用する関数 lookup-text-hanzi-to-pinyin は、漢字をピン音に変換する。
漢字は台湾漢字・中国漢字の両方を使用できる。複数の発音がある漢字は全ての組み合わせを返す。
</p>

<pre class="example">
(lookup-text-hanzi-to-pinyin "重慶") ⏎
("zhong4qing4" "chong2qing4")
</pre>
</div>
</div>


<div id="outline-container-4" class="outline-2">
<h2 id="sec-4">設定</h2>
<div class="outline-text-2" id="text-4">
<p>
DD-CH10 のCD-ROMをコピーして、ndeb エージェントとしてディレクトリを指定する。
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(setq lookup-search-agents 
      '(...
        (ndeb <span style="color: #ffa07a;">"~/edicts/ZHONG_RI"</span>)
        ...))
</pre>
</div>


<div class="figure">
<p><img src="2013-03-19-ddch10.png"  alt="2013-03-19-ddch10.png"/></p>
</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs で zsh の ヒストリファイルを閲覧・編集する]]></title>
    <link href="http://kawabata.github.com/blog/2013-03-17-zsh-history.html"/>
    <updated>2013-03-17T23:00:00+09:00</updated>
    <id>http://kawabata.github.com/blog/zsh-history</id>
    <content type="html"><![CDATA[<p>
zsh のヒストリファイル <code>/.zsh_history</code> は、ASCII以外の文字に対してエス
ケープをしているため、通常はエディタで閲覧したり編集できない。
</p>




<p>
Emacsで、 <code>zsh_history</code> 独自のデコーダ・エンコーダを実装することで、
zshヒストリファイルの閲覧・編集できるようにする。
</p>




<div id="outline-container-1" class="outline-2">
<h2 id="sec-1">zsh ヒストリファイルの構造</h2>
<div class="outline-text-2" id="text-1">
<p>
zshのヒストリファイルは、保存するデータの各バイトにおいて、それが
0x80-0x9d または 0xa0 のとき、その前に 0x83 を入れて、続くバイトの
6bit 目を反転させるようになっている。詳細は zsh のソースコードの
meta.c を参照。
</p>
</div>
</div>


<div id="outline-container-2" class="outline-2">
<h2 id="sec-2">zsh ヒストリファイルのデコーダ</h2>
<div class="outline-text-2" id="text-2">
<p>
以下に zshのヒストリファイルのデコーダをCCLで示す。ただし、本来はCCLは
UCS符号を出力することになっているが、このCCLデコーダはUTF-8のバイトシー
ケンスを出力する。（UTF-8のデコーダを別途接続する必要がある。）
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(define-ccl-program zsh-history-decoder
  '(1 ((<span style="color: #00ffff;">loop</span>
        (read-if (r0 == #x83)
                 ((read r0) (r0 ^= #x20)))
        (write r0)
        (repeat))))
  <span style="color: #ffa07a;">"decode .zsh_history file."</span>)
</pre>
</div>
</div>
</div>


<div id="outline-container-3" class="outline-2">
<h2 id="sec-3">zsh ヒストリファイルのエンコーダ</h2>
<div class="outline-text-2" id="text-3">
<div class="org-src-container">

<pre class="src src-emacs-lisp">(define-ccl-program zsh-history-encoder
  '(2 ((<span style="color: #00ffff;">loop</span>
        (read r0)
        (r1 = (r0 &lt; #x9e))
        (r2 = (r0 == #xa0))
        (<span style="color: #00ffff;">if</span> (((r0 &gt; #x82) &amp; r1) | r2)
            ((write #x83) (write (r0 ^ #x20)))
          (write r0))
        (repeat))))
  <span style="color: #ffa07a;">"encode .zsh_history file."</span>)
</pre>
</div>
</div>
</div>


<div id="outline-container-4" class="outline-2">
<h2 id="sec-4">zsh ヒストリファイルの符号体系</h2>
<div class="outline-text-2" id="text-4">
<p>
上記のデコーダ・エンコーダは、UTF-8 バイト列を対象としているが、これら
はEmacsではLatin-1に解釈されてしまう。そのため、一旦Latin-1と解釈された
符号をUCS符号に直さなければならない。そのために、post-read-converter と、
pre-write-converter を用意する。
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #00ffff;">defun</span> <span style="color: #87cefa;">post-read-decode-utf8</span> (len)
  (<span style="color: #00ffff;">save-excursion</span>
    (<span style="color: #00ffff;">save-restriction</span>
      (narrow-to-region (point) (+ (point) len))
      (encode-coding-region (point-min) (point-max) 'latin-1)
      (decode-coding-region (point-min) (point-max) 'utf-8)
      (- (point-max) (point-min)))))

(<span style="color: #00ffff;">defun</span> <span style="color: #87cefa;">pre-write-encode-utf8</span> (_ignored _ignored2)
  (encode-coding-region (point-min) (point-max) 'utf-8)
  (decode-coding-region (point-min) (point-max) 'latin-1))
</pre>
</div>

<p>
上記をまとめて、zsh-history という符号化体系を作成し、これを
<code>zsh_history</code> という文字列を含むファイルに結び付ける。
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(define-coding-system 'zsh-history <span style="color: #ffa07a;">"ZSH history"</span>
  <span style="color: #b0c4de;">:coding-type</span> 'ccl
  <span style="color: #b0c4de;">:charset-list</span> '(unicode)
  <span style="color: #b0c4de;">:mnemonic</span> ?Z <span style="color: #b0c4de;">:ascii-compatible-p</span> t
  <span style="color: #b0c4de;">:eol-type</span> 'unix
  <span style="color: #b0c4de;">:ccl-decoder</span> 'zsh-history-decoder
  <span style="color: #b0c4de;">:post-read-conversion</span> 'post-read-decode-utf8
  <span style="color: #b0c4de;">:ccl-encoder</span> 'zsh-history-encoder
  <span style="color: #b0c4de;">:pre-write-conversion</span> 'pre-write-encode-utf8)

(modify-coding-system-alist 'file <span style="color: #ffa07a;">"zsh_history"</span> 'zsh-history)
</pre>
</div>

<p>
なお、Emacsは保存する際に最適な符号化を方法を見つけて再割当てを行うため、
一旦、この符号化方式でファイルを保存した後は再度、ファイルを読みなおす
必要がある。
</p>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs Lookup で PDICタイ語辞書を使う]]></title>
    <link href="http://kawabata.github.com/blog/2013-03-16-thai.html"/>
    <updated>2013-03-16T23:00:00+09:00</updated>
    <id>http://kawabata.github.com/blog/thai</id>
    <content type="html"><![CDATA[<p>
<i>Lookup</i> は、PDICの <a href="http://www.pdicthai.com/~pdicthai/">タイ語辞書</a> を扱うことができる。
</p>




<div id="outline-container-1" class="outline-2">
<h2 id="sec-1">PDIC タイ語辞書</h2>
<div class="outline-text-2" id="text-1">
<p>
日・タイ辞書、タイ・日辞書（かな）、タイ日辞書（ローマ字）の３種類がある。
漢字からは検索できないので、漢字語を検索したい場合はフィルタを設定する必要がある。
</p>
</div>
</div>


<div id="outline-container-2" class="outline-2">
<h2 id="sec-2">漢字・ひらがなフィルタ</h2>
<div class="outline-text-2" id="text-2">
<p>
Lookup の lookup-query-filter-kanji-to-kana は、クエリの文字を漢字から
平仮名に変換する。この関数は内部で mecab を使う
lookup-text-get-kana-readings を呼び出している。
</p>

<pre class="example">
(lookup-text-get-kana-readings "山本山") ⏎
("やまもとやま" "やまもとさん")
</pre>
</div>
</div>


<div id="outline-container-3" class="outline-2">
<h2 id="sec-3">設定</h2>
<div class="outline-text-2" id="text-3">
<p>
エージェントにオプションとして <code>:query-filter
lookup-query-filter-kanji-to-kana</code> を設定する。ただし、サポートファイル
support-pdic-thai.el がすでにこの設定をしているため、辞書IDに
"Uni-PdicThai-JP-IPA" という文字列が含まれているならば、ユーザが何か設
定する必要はない。
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(setq lookup-search-agents 
      '(...
        (ndpdic <span style="color: #ffa07a;">"~/edicts/PdicThai"</span>)
        ...))
</pre>
</div>


<div class="figure">
<p><img src="2013-03-16-thai.png"  alt="2013-03-16-thai.png"/></p>
</div>
</div>
</div>

]]></content>
  </entry>
  
</feed>
