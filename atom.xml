<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[A Riddle Wrapped in a Mystery]]></title>
  <link href="http://kawabata.github.com/atom.xml" rel="self"/>
  <link href="http://kawabata.github.com/"/>
  <updated>2013-04-01T13:18:16+09:00</updated>
  <id>http://kawabata.github.com/</id>
  <author>
    <name><![CDATA[dotabata]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[数学用アルファベットをEmacsで入力する。]]></title>
    <link href="http://kawabata.github.com/blog/2013-03-23-math-symbols.html"/>
    <updated>2013-03-23T23:00:00+09:00</updated>
    <id>http://kawabata.github.com/blog/math-symbols</id>
    <content type="html"><![CDATA[<p>
Emacs Lisp の <a href="http://github.com/kawabata/math-symbols">math-symbols.el</a> は、通常の文字をイタリック文字やフラク
トゥール文字へ変換できる。
</p>

<div id="outline-container-1" class="outline-2">
<h2 id="sec-1">Unicode の数学文字</h2>
<div class="outline-text-2" id="text-1">
<p>
通常、イタリックや太字は文字符号ではなくフォントで区別するが、数式で使
う文字のイタリックや太字は意味的に異なるため、別の文字符号でこれらを扱う。
</p>

<p>
Unicode で符号化されているスタイルは以下のとおりである。
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides" >


<colgroup>
<col class="left"/>

<col class="left"/>

<col class="left"/>

<col class="left"/>
</colgroup>
<thead>
<tr>
<th scope="col" class="left">styles / scripts</th>
<th scope="col" class="left">alphabets</th>
<th scope="col" class="left">greeks*</th>
<th scope="col" class="left">numerals</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">bold</td>
<td class="left">yes</td>
<td class="left">yes</td>
<td class="left">yes</td>
</tr>

<tr>
<td class="left">(bold) italic</td>
<td class="left">yes</td>
<td class="left">yes</td>
<td class="left">yes</td>
</tr>

<tr>
<td class="left">(bold) fraktur</td>
<td class="left">yes</td>
<td class="left">no</td>
<td class="left">no</td>
</tr>

<tr>
<td class="left">(bold) script</td>
<td class="left">yes</td>
<td class="left">no</td>
<td class="left">no</td>
</tr>

<tr>
<td class="left">double-struck</td>
<td class="left">yes</td>
<td class="left">partial</td>
<td class="left">yes</td>
</tr>

<tr>
<td class="left">monospace</td>
<td class="left">yes</td>
<td class="left">no</td>
<td class="left">yes</td>
</tr>

<tr>
<td class="left">sans-serif (italic)</td>
<td class="left">yes</td>
<td class="left">no</td>
<td class="left">yes</td>
</tr>

<tr>
<td class="left">sans-serif bold (italic)</td>
<td class="left">yes</td>
<td class="left">yes</td>
<td class="left">yes</td>
</tr>

<tr>
<td class="left">subscript</td>
<td class="left">partial</td>
<td class="left">no</td>
<td class="left">yes</td>
</tr>

<tr>
<td class="left">superscript</td>
<td class="left">partial</td>
<td class="left">no</td>
<td class="left">yes</td>
</tr>
</tbody>
</table>

<p>
上の表において、アルファベットとは、大文字・小文字それぞれ２６文字ずつ
である。また、ギリシャ文字は全て数学用ギリシャ文字記号とナブラ（ϵ, ϑ,
ϰ, ϕ, ϱ, ϖ, ∇）を含む。
</p>
</div>
</div>
<div id="outline-container-2" class="outline-2">
<h2 id="sec-2">Unicode の符号とフォント</h2>
<div class="outline-text-2" id="text-2">
<p>
Unicode では、数学用文字の符号は　U+1D400 からの SMP面で符号化されてい
る。ただし、一部の早期にBMPで符号化されていた文字 (ℜなど) は別である。
</p>

<p>
数学記号フォントは <a href="http://en.wikipedia.org/wiki/STIX_Fonts_project">STIX Font Project</a> が開発したフォントが主要なOSにはす
でにインストール済である。
</p>
</div>
</div>
<div id="outline-container-3" class="outline-2">
<h2 id="sec-3">init.el の設定</h2>
<div class="outline-text-2" id="text-3">
<p>
単に <code>(require 'math-sybols)</code> でインストールされる。
</p>
</div>
</div>
<div id="outline-container-4" class="outline-2">
<h2 id="sec-4">文字のスタイル化</h2>
<div class="outline-text-2" id="text-4">
<p>
アルファベット等の文字をスタイル化したい場合は、領域を選択して、 <code>M-x
math-symbols-XXXX-region</code> を実行する。たとえば abcde を 太字イタリック
にしたい場合は、 <code>M-x math-symbols-bold-italic-region</code> とすれば良い。
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides" >


<colgroup>
<col class="left"/>

<col class="left"/>

<col class="left"/>
</colgroup>
<tbody>
<tr>
<td class="left">math-symbols-fraktur-region</td>
<td class="left">abcde</td>
<td class="left">𝔞𝔟𝔠𝔡𝔢</td>
</tr>

<tr>
<td class="left">math-symbols-bold-region</td>
<td class="left">abcde</td>
<td class="left">𝐚𝐛𝐜𝐝𝐞</td>
</tr>

<tr>
<td class="left">math-symbols-italic-region</td>
<td class="left">abcde</td>
<td class="left">𝑎𝑏𝑐𝑑𝑒</td>
</tr>

<tr>
<td class="left">math-symbols-script-region</td>
<td class="left">abcde</td>
<td class="left">𝒶𝒷𝒸𝒹ℯ</td>
</tr>

<tr>
<td class="left">math-symbols-double-struck-region</td>
<td class="left">abcde</td>
<td class="left">𝕒𝕓𝕔𝕕𝕖</td>
</tr>

<tr>
<td class="left">math-symbols-sans-serif-region</td>
<td class="left">abcde</td>
<td class="left">𝖺𝖻𝖼𝖽𝖾</td>
</tr>

<tr>
<td class="left">math-symbols-superscript-region</td>
<td class="left">12345</td>
<td class="left">¹²³⁴⁵</td>
</tr>
</tbody>
</table>

<p>
スタイル化した文字をもとに戻すには M-x ucs-normalize-NFKC-region を実行
する。文字列を変換するには、 <code>(math-symbols-italic-region "hogehoge")</code>
と実行する。文字列中に変換できない文字がある場合（空白含む）はエラーに
なるが、 <code>C-u</code> プレフィックスで抑制できる。
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(math-symbols-fraktur-string <span style="color: #ffa07a;">"fghijk"</span>) &#9166;
<span style="color: #ffa07a;">"&#120099;&#120100;&#120101;&#120102;&#120103;&#120104;"</span>
</pre>
</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[汎用電子とAdobe-Japan1のIVSを相互変換する。]]></title>
    <link href="http://kawabata.github.com/blog/2013-03-23-aj1-hd.html"/>
    <updated>2013-03-23T00:00:00+09:00</updated>
    <id>http://kawabata.github.com/blog/aj1-hd</id>
    <content type="html"><![CDATA[<div id="outline-container-1" class="outline-2">
<h2 id="sec-1">IVS</h2>
<div class="outline-text-2" id="text-1">
<p>
IVS (Ideographic Variation Sequence) は、異体字を細かく制御する技術である。
</p>
</div>
</div>
<div id="outline-container-2" class="outline-2">
<h2 id="sec-2">汎用電子とIVS</h2>
</div>

<div id="outline-container-3" class="outline-2">
<h2 id="sec-3">設定</h2>
<div class="outline-text-2" id="text-3">
<p>
<a href="http://github.com/cjkvi">http://github.com/cjkvi</a> にある、
</p>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs Lookup で Goo のWeb辞書を利用する。]]></title>
    <link href="http://kawabata.github.com/blog/2013-03-21-goo.html"/>
    <updated>2013-03-21T23:00:00+09:00</updated>
    <id>http://kawabata.github.com/blog/goo</id>
    <content type="html"><![CDATA[<p>
<a href="http://lookup2.github.com">Lookup</a> の ndweb エージェントクラスは、世界中にあるWeb上の辞書を利用できる。
</p>

<div id="outline-container-1" class="outline-2">
<h2 id="sec-1">ndwebのオプション</h2>
<div class="outline-text-2" id="text-1">
<p>
Lookup でWeb辞書を使用する場合は、以下のオプションを指定する。
</p>

<dl class="org-dl">
<dt> :self </dt><dd>OpenSearch Description URL
</dd>
<dt> :title </dt><dd>辞書のタイトル
</dd>
<dt> :methods </dt><dd>辞書の検索メソッド（前方一致など）
</dd>
<dt> :suggestions </dt><dd>候補の選択方法 （関数ならば HTMLファイルから候補を生成、URLならば OpenSearch JSON を指定する）
</dd>
<dt> :results </dt><dd>選択した候補の内容を表示する URL。
</dd>
<dt> :method </dt><dd>HTTP Post または Get のどちらを利用するか。
</dd>
</dl>

<p>
なお、:self が指定されているのならば、:title, :suggestions :results :methods 等のオプションの指定は必要ない。
これらは :self で指定された OpenSearch XML から自動的に取得される。逆に、:self がない場合は最低限、:title, 
と :results が必須になる。
</p>

<p>
<a href="http://mycroftproject.com/">Mycroft Project</a> では、全世界 2万以上の辞書の検索エンジンの OpenSearch
XML が蓄積されている。ndweb エージェントの位置に、&#8221;mycroft:XXX&#8221; を指定
すると、自動的に Mycroft のサイトからXXX の OpenSearch XML を取得して、
辞書を設定する。
</p>
</div>
</div>
<div id="outline-container-2" class="outline-2">
<h2 id="sec-2">ndweb-options</h2>
<div class="outline-text-2" id="text-2">
<p>
ndweb-options には、goo等のようないくつかのnewebエージェント用の独自オ
プションがプリセットされている。ndweb-options にあるWebサイトを使えば、
自分でオプションを設定する必要なく、すぐにそのWeb辞書を利用できる。
</p>
</div>
</div>
<div id="outline-container-3" class="outline-2">
<h2 id="sec-3">設定</h2>
<div class="outline-text-2" id="text-3">
<p>
ndweb-options.el を参考に、使用したいWeb辞書のURLの &#8221;<a href="http://">http://</a>&#8221; を除いた部分を指定する。
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(setq lookup-search-agents 
      '(...
        (ndweb <span style="color: #ffa07a;">"dictionary.goo.ne.jp/jc"</span>)
        ...))
</pre>
</div>


<div class="figure">
<p><img src="2013-03-21-goo.png"  alt="2013-03-21-goo.png"/></p>
</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs Lookup で Sony DD-CH10 の日中辞書を利用する。]]></title>
    <link href="http://kawabata.github.com/blog/2013-03-19-ddch10.html"/>
    <updated>2013-03-19T23:00:00+09:00</updated>
    <id>http://kawabata.github.com/blog/ddch10</id>
    <content type="html"><![CDATA[<p>
<i>Lookup</i> は、かつて Sony が発売していた電子辞書 <a href="http://www.sony.co.jp/SonyInfo/News/Press_Archive/199703/97CI-022/">DD-CH10</a> CD-ROMに入っていた小学館の日中・中日辞書が利用できる。
この辞書は語彙・例文が充実していて、発売後１５年が経過した今でも人気が高い。
</p>

<div id="outline-container-1" class="outline-2">
<h2 id="sec-1">EBXA-C</h2>
<div class="outline-text-2" id="text-1">
<p>
DD-CH10 は、電子辞書規格 EBXA を中国語向けに拡張した、これ一台限りの特別規格 EBXA-C を採用している。
この辞書の閲覧には、EBXA-C 対応のパッチを当てた <a href="http://ikazuhiro.s206.xrea.com/staticpages/index.php/eblook">eblook</a> を利用する。
</p>
</div>
</div>
<div id="outline-container-2" class="outline-2">
<h2 id="sec-2">漢字インデクサ</h2>
<div class="outline-text-2" id="text-2">
<p>
DD-CH10 の日中辞書は平仮名とピン音でしか検索できないが、<a href="http://www31.ocn.ne.jp/~h_ishida/EBKIdx.html">EB漢字インデクサ</a> 
を使用することで、漢字でも検索できるようになる。
</p>
</div>
</div>
<div id="outline-container-3" class="outline-2">
<h2 id="sec-3">ピン音フィルタ</h2>
<div class="outline-text-2" id="text-3">
<p>
Lookup の support-zhongri ファイルは、中国語の文字をピン音に直すクエリフィルタが組み込まれている。
このクエリフィルタが使用する関数 lookup-text-hanzi-to-pinyin は、漢字をピン音に変換する。
漢字は台湾漢字・中国漢字の両方を使用できる。複数の発音がある漢字は全ての組み合わせを返す。
</p>

<pre class="example">
(lookup-text-hanzi-to-pinyin "重慶") ⏎
("zhong4qing4" "chong2qing4")
</pre>
</div>
</div>
<div id="outline-container-4" class="outline-2">
<h2 id="sec-4">設定</h2>
<div class="outline-text-2" id="text-4">
<p>
DD-CH10 のCD-ROMをコピーして、ndeb エージェントとしてディレクトリを指定する。
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(setq lookup-search-agents 
      '(...
        (ndeb <span style="color: #ffa07a;">"~/edicts/ZHONG_RI"</span>)
        ...))
</pre>
</div>


<div class="figure">
<p><img src="2013-03-19-ddch10.png"  alt="2013-03-19-ddch10.png"/></p>
</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs で zsh の ヒストリファイルを閲覧・編集する]]></title>
    <link href="http://kawabata.github.com/blog/2013-03-17-zsh-history.html"/>
    <updated>2013-03-17T23:00:00+09:00</updated>
    <id>http://kawabata.github.com/blog/zsh-history</id>
    <content type="html"><![CDATA[<p>
zsh のヒストリファイル <code>/.zsh_history</code> は、ASCII以外の文字に対してエス
ケープをしているため、通常はエディタで閲覧したり編集できない。
</p>

<p>
Emacsで、 <code>zsh_history</code> 独自のデコーダ・エンコーダを実装することで、
zshヒストリファイルの閲覧・編集できるようにする。
</p>

<div id="outline-container-1" class="outline-2">
<h2 id="sec-1">zsh ヒストリファイルの構造</h2>
<div class="outline-text-2" id="text-1">
<p>
zshのヒストリファイルは、保存するデータの各バイトにおいて、それが
0x80-0x9d または 0xa0 のとき、その前に 0x83 を入れて、続くバイトの
6bit 目を反転させるようになっている。詳細は zsh のソースコードの
meta.c を参照。
</p>
</div>
</div>
<div id="outline-container-2" class="outline-2">
<h2 id="sec-2">zsh ヒストリファイルのデコーダ</h2>
<div class="outline-text-2" id="text-2">
<p>
以下に zshのヒストリファイルのデコーダをCCLで示す。ただし、本来はCCLは
UCS符号を出力することになっているが、このCCLデコーダはUTF-8のバイトシー
ケンスを出力する。（UTF-8のデコーダを別途接続する必要がある。）
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(define-ccl-program zsh-history-decoder
  '(1 ((<span style="color: #00ffff;">loop</span>
        (read-if (r0 == #x83)
                 ((read r0) (r0 ^= #x20)))
        (write r0)
        (repeat))))
  <span style="color: #ffa07a;">"decode .zsh_history file."</span>)
</pre>
</div>
</div>
</div>
<div id="outline-container-3" class="outline-2">
<h2 id="sec-3">zsh ヒストリファイルのエンコーダ</h2>
<div class="outline-text-2" id="text-3">
<div class="org-src-container">

<pre class="src src-emacs-lisp">(define-ccl-program zsh-history-encoder
  '(2 ((<span style="color: #00ffff;">loop</span>
        (read r0)
        (r1 = (r0 &lt; #x9e))
        (r2 = (r0 == #xa0))
        (<span style="color: #00ffff;">if</span> (((r0 &gt; #x82) &amp; r1) | r2)
            ((write #x83) (write (r0 ^ #x20)))
          (write r0))
        (repeat))))
  <span style="color: #ffa07a;">"encode .zsh_history file."</span>)
</pre>
</div>
</div>
</div>
<div id="outline-container-4" class="outline-2">
<h2 id="sec-4">zsh ヒストリファイルの符号体系</h2>
<div class="outline-text-2" id="text-4">
<p>
上記のデコーダ・エンコーダは、UTF-8 バイト列を対象としているが、これら
はEmacsではLatin-1に解釈されてしまう。そのため、一旦Latin-1と解釈された
符号をUCS符号に直さなければならない。そのために、post-read-converter と、
pre-write-converter を用意する。
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #00ffff;">defun</span> <span style="color: #87cefa;">post-read-decode-utf8</span> (len)
  (<span style="color: #00ffff;">save-excursion</span>
    (<span style="color: #00ffff;">save-restriction</span>
      (narrow-to-region (point) (+ (point) len))
      (encode-coding-region (point-min) (point-max) 'latin-1)
      (decode-coding-region (point-min) (point-max) 'utf-8)
      (- (point-max) (point-min)))))

(<span style="color: #00ffff;">defun</span> <span style="color: #87cefa;">pre-write-encode-utf8</span> (_ignored _ignored2)
  (encode-coding-region (point-min) (point-max) 'utf-8)
  (decode-coding-region (point-min) (point-max) 'latin-1))
</pre>
</div>

<p>
上記をまとめて、zsh-history という符号化体系を作成し、これを
<code>zsh_history</code> という文字列を含むファイルに結び付ける。
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(define-coding-system 'zsh-history <span style="color: #ffa07a;">"ZSH history"</span>
  <span style="color: #b0c4de;">:coding-type</span> 'ccl
  <span style="color: #b0c4de;">:charset-list</span> '(unicode)
  <span style="color: #b0c4de;">:mnemonic</span> ?Z <span style="color: #b0c4de;">:ascii-compatible-p</span> t
  <span style="color: #b0c4de;">:eol-type</span> 'unix
  <span style="color: #b0c4de;">:ccl-decoder</span> 'zsh-history-decoder
  <span style="color: #b0c4de;">:post-read-conversion</span> 'post-read-decode-utf8
  <span style="color: #b0c4de;">:ccl-encoder</span> 'zsh-history-encoder
  <span style="color: #b0c4de;">:pre-write-conversion</span> 'pre-write-encode-utf8)

(modify-coding-system-alist 'file <span style="color: #ffa07a;">"zsh_history"</span> 'zsh-history)
</pre>
</div>

<p>
なお、Emacsは保存する際に最適な符号化を方法を見つけて再割当てを行うため、
一旦、この符号化方式でファイルを保存した後は再度、ファイルを読みなおす
必要がある。
</p>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs Lookup で PDICタイ語辞書を使う]]></title>
    <link href="http://kawabata.github.com/blog/2013-03-16-thai.html"/>
    <updated>2013-03-16T23:00:00+09:00</updated>
    <id>http://kawabata.github.com/blog/thai</id>
    <content type="html"><![CDATA[<p>
<i>Lookup</i> は、PDICの <a href="http://www.pdicthai.com/~pdicthai/">タイ語辞書</a> を扱うことができる。
</p>

<div id="outline-container-1" class="outline-2">
<h2 id="sec-1">PDIC タイ語辞書</h2>
<div class="outline-text-2" id="text-1">
<p>
日・タイ辞書、タイ・日辞書（かな）、タイ日辞書（ローマ字）の３種類がある。
漢字からは検索できないので、漢字語を検索したい場合はフィルタを設定する必要がある。
</p>
</div>
</div>
<div id="outline-container-2" class="outline-2">
<h2 id="sec-2">漢字・ひらがなフィルタ</h2>
<div class="outline-text-2" id="text-2">
<p>
Lookup の lookup-query-filter-kanji-to-kana は、クエリの文字を漢字から
平仮名に変換する。この関数は内部で mecab を使う
lookup-text-get-kana-readings を呼び出している。
</p>

<pre class="example">
(lookup-text-get-kana-readings "山本山") ⏎
("やまもとやま" "やまもとさん")
</pre>
</div>
</div>
<div id="outline-container-3" class="outline-2">
<h2 id="sec-3">設定</h2>
<div class="outline-text-2" id="text-3">
<p>
エージェントにオプションとして <code>:query-filter
lookup-query-filter-kanji-to-kana</code> を設定する。ただし、サポートファイル
support-pdic-thai.el がすでにこの設定をしているため、辞書IDに
&#8220;Uni-PdicThai-JP-IPA&#8221; という文字列が含まれているならば、ユーザが何か設
定する必要はない。
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(setq lookup-search-agents 
      '(...
        (ndpdic <span style="color: #ffa07a;">"~/edicts/PdicThai"</span>)
        ...))
</pre>
</div>


<div class="figure">
<p><img src="2013-03-16-thai.png"  alt="2013-03-16-thai.png"/></p>
</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacsで字通を読む]]></title>
    <link href="http://kawabata.github.com/blog/2013-03-15-jitsuu.html"/>
    <updated>2013-03-15T23:00:00+09:00</updated>
    <id>http://kawabata.github.com/blog/jitsuu</id>
    <content type="html"><![CDATA[<p>
<a href="http://www.tranradar.net/cd-jitsuu.html">字通 </a>は白川静の辞書３部作の最高峰。書籍版は重いし価格も23,000円と高いが、
CD-ROM版なら安いしHDDにコピーできてノートパソコンで持ち歩ける。
</p>

<p>
Emacsの<a href="http://lookup2.github.com">Lookup</a> で字通CD-ROMを読むための検索エージェント <code>ndjitsuu</code> を開発した。
</p>

<div id="outline-container-1" class="outline-2">
<h2 id="sec-1">インデックスファイルの作成</h2>
<div class="outline-text-2" id="text-1">
<p>
「字通」を検索するためには、インデックスファイルを事前に作成する必要が
ある。lookup のmisc フォルダに入っている <code>jitsuu_mk_jukugo_list.rb</code>
と~jitsuu<sub>mk</sub><sub>oyaji</sub><sub>list</sub>.rb~ を使って、インデックスファイルを作成する。
</p>

<pre class="example">
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% cd ~/edicts/Jitsuu/DATA/
</span><span class='line'>% ruby jitsuu_mk_oyaji_list.rb &gt; oyaji.txt
</span><span class='line'>% ruby jitsuu_mk_jukugo_list.rb &gt; jukugo.txt</span></code></pre></td></tr></table></div></figure>
</pre>

<p>
次に、生成された oyaji.txt と jukugo.txt の外字をUCS漢字コードに置換す
る。
</p>

<pre class="example">
M-x find-file oyaji.txt
M-x ndjitsuu-convert-gaiji-to-ucs
M-x save-buffer

M-x find-file jukugo.txt
M-x ndjitsuu-convert-gaiji-to-ucs
M-x save-buffer
</pre>

<p>
oyaji.txt と jukugo.txt は DATAフォルダと同じ位置に置く。
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(setq lookup-search-agents
      `(...
        (ndjitsuu <span style="color: #ffa07a;">"~/edicts/Jitsuu"</span>)
        ...))
</pre>
</div>

<p>
<code>lookup-search-agents</code> 変数に <code>ndjitsuu</code> を加えて、 <code>M-x restart</code> すれ
ば字通をEmacsで読めるようになる。
</p>

<p>
<i>image:/images/2013-03-15-jitsuu.png</i>
</p>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs Lookup で Karak PDIC中日辞書を使う]]></title>
    <link href="http://kawabata.github.com/blog/2013-03-15-cj2.html"/>
    <updated>2013-03-15T00:30:00+09:00</updated>
    <id>http://kawabata.github.com/blog/cj2</id>
    <content type="html"><![CDATA[<p>
Emacs <i>Lookup</i> で、<a href="http://www.karak.jp/">Karak氏</a> が作成した<a href="http://jp.soft73.com/pdic用中国語辞書-2-0/">中日辞書</a> を使うことができる。
</p>

<div id="outline-container-1" class="outline-2">
<h2 id="sec-1">PDIC形式辞書</h2>
<div class="outline-text-2" id="text-1">
<p>
<a href="http://homepage3.nifty.com/TaN/unicode/dic-spec.html">PDIC</a> は Unicode にフル対応した辞書フォーマットで、日本の多言語辞書によ
く利用されている。特徴として、内部文字符号として BOCU (Binary
Ordered Compression of Unicode) と呼ばれる圧縮形式を採用している。
</p>

<p>
BOCUはハフマン符号ほど圧縮率は大きくはないが、圧縮後の文字列が辞書式順
序を維持しているため、辞書には適した圧縮方式である。
</p>
</div>
</div>
<div id="outline-container-2" class="outline-2">
<h2 id="sec-2">BOCUデコーダ</h2>
<div class="outline-text-2" id="text-2">
<p>
Lookup に付属している <code>bocu.el</code> は、BOCU符号をデコードする。 <code>bocu.el</code>
は、レジスタベースのCCL言語で記述されていて、Emacs Lisp に比べておよそ
５～１０倍程度高速に動作する。
</p>
</div>
</div>
<div id="outline-container-3" class="outline-2">
<h2 id="sec-3">ndpdicエージェント</h2>
<div class="outline-text-2" id="text-3">
<p>
ndpdicエージェントは、 <code>bocu.el</code> を利用して、PDIC辞書の検索と表示を行う。
CJ2辞書で利用するには以下のように設定する。
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp"><span class="linenr">1: </span>(setq lookup-search-agents
<span class="linenr">2: </span>      '(....
<span class="linenr">3: </span>        (ndpdic <span style="color: #ffa07a;">"~/edicts/cj2"</span>)
<span class="linenr">4: </span>        ...
</pre>
</div>

<p>
ndpdicエージェントは、PDIC辞書が入ったフォルダを指定すると、そこから拡
張子 &#8221;<code>.dic</code>&#8221; のファイルを探し、辞書オブジェクトを生成する。
</p>

<p>
<code>M-x lookup-restart</code> で中日辞書が現れるかを確認し、検索する。
</p>


<div class="figure">
<p><img src="2013-03-15-cj2.png"  alt="2013-03-15-cj2.png"/></p>
</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacsの汎変数]]></title>
    <link href="http://kawabata.github.com/blog/2013-03-14-general-variables.html"/>
    <updated>2013-03-14T00:30:00+09:00</updated>
    <id>http://kawabata.github.com/blog/general-variables</id>
    <content type="html"><![CDATA[<p>
Emacs 24.3 で導入された汎変数を使えば、ソースコードの可読性が高まる可能
性がある。
</p>

<div id="outline-container-1" class="outline-2">
<h2 id="sec-1">setf の例</h2>
<div class="outline-text-2" id="text-1">
<p>
汎変数の代入マクロ setf を使えば、 car だけで setcar 相当が記述できる。
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(setq a (cons 3 5))
(setf (car a) 10)
a
&#8594; (10 . 5)
</pre>
</div>

<p>
setcar/setcdr という関数を別に覚えるよりは、学習コストは低い。同様に、
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(setq a (list 1 10 100 1000 10000))
(elt a 3)
&#8594; 1000
(setf (elt a 3) 300)
a
&#8594; (1 10 100 300 10000)
</pre>
</div>

<p>
となる。
</p>
</div>
</div>
<div id="outline-container-2" class="outline-2">
<h2 id="sec-2">setf に対応している関数</h2>
<div class="outline-text-2" id="text-2">
<p>
24.3 で、setf に対応している関数は以下の通り。setf を使えば右の関数は
不要になる。覚える関数が減れば、プログラム作成・保守も楽になる。
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides" >


<colgroup>
<col class="left"/>

<col class="left"/>
</colgroup>
<thead>
<tr>
<th scope="col" class="left">汎変数の対象</th>
<th scope="col" class="left">対応する設定関数</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">aref</td>
<td class="left">aset</td>
</tr>

<tr>
<td class="left">car</td>
<td class="left">setcar</td>
</tr>

<tr>
<td class="left">cdr</td>
<td class="left">setcdr</td>
</tr>

<tr>
<td class="left">caar</td>
<td class="left">setcar/car</td>
</tr>

<tr>
<td class="left">cadr</td>
<td class="left">setcar/cdr</td>
</tr>

<tr>
<td class="left">cdar</td>
<td class="left">setcdr/car</td>
</tr>

<tr>
<td class="left">cddr</td>
<td class="left">setcdr/cdr</td>
</tr>

<tr>
<td class="left">elt</td>
<td class="left">setcar/nthcdr</td>
</tr>

<tr>
<td class="left">get</td>
<td class="left">put</td>
</tr>

<tr>
<td class="left">gethash</td>
<td class="left">puthash</td>
</tr>

<tr>
<td class="left">nth</td>
<td class="left">nthcdr/setcar</td>
</tr>

<tr>
<td class="left">nthcdr</td>
<td class="left">nthcdr/setcdr</td>
</tr>

<tr>
<td class="left">default-value</td>
<td class="left">set-default</td>
</tr>

<tr>
<td class="left">frame-parameter</td>
<td class="left">set-frame-parameter</td>
</tr>

<tr>
<td class="left">terminal-parameter</td>
<td class="left">set-terminal-parameter</td>
</tr>

<tr>
<td class="left">keymap-parent</td>
<td class="left">set-keymap-parent</td>
</tr>

<tr>
<td class="left">match-data</td>
<td class="left">set-match-data</td>
</tr>

<tr>
<td class="left">overlay-get</td>
<td class="left">overlay-put</td>
</tr>

<tr>
<td class="left">overlay-start</td>
<td class="left">move-overlay</td>
</tr>

<tr>
<td class="left">overlay-end</td>
<td class="left">move-overlay</td>
</tr>

<tr>
<td class="left">process-buffer</td>
<td class="left">set-process-buffer</td>
</tr>

<tr>
<td class="left">process-filter</td>
<td class="left">set-process-filter</td>
</tr>

<tr>
<td class="left">process-sentinel</td>
<td class="left">set-process-sentinel</td>
</tr>

<tr>
<td class="left">process-get</td>
<td class="left">process-put</td>
</tr>

<tr>
<td class="left">window-buffer</td>
<td class="left">set-window-buffer</td>
</tr>

<tr>
<td class="left">window-display-table</td>
<td class="left">set-window-display-table</td>
</tr>

<tr>
<td class="left">window-dedicated-p</td>
<td class="left">set-window-dedicated-p</td>
</tr>

<tr>
<td class="left">window-hscroll</td>
<td class="left">set-window-hscroll</td>
</tr>

<tr>
<td class="left">window-parameter</td>
<td class="left">set-window-parameter</td>
</tr>

<tr>
<td class="left">window-point</td>
<td class="left">set-window-point</td>
</tr>

<tr>
<td class="left">window-start</td>
<td class="left">set-window-start</td>
</tr>

<tr>
<td class="left">progn</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">let, let*</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">cond</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">if</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">cons</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">logand</td>
<td class="left">&#xa0;</td>
</tr>
</tbody>
</table>

<p>
汎変数を使うと、構造の構築子とアクセス関数のペアだけで、構造に式を代入
できる。たとえば hash の場合、これまではmake-hash-table, gethash の他に
puthash が必要だったが、setf を使えばputhash は不要になる。
</p>

<pre class="example">
(puthash key val table) ≅ (setf (gethash key table) val)
</pre>
</div>
</div>
<div id="outline-container-3" class="outline-2">
<h2 id="sec-3">汎変数の作り方</h2>
<div class="outline-text-2" id="text-3">
<p>
gv.el の最後には、コメントアウトされている alist-get 関数の実装例があり、
自分の汎変数を作る際の参考になる。
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp"><span class="linenr"> 1: </span>(<span style="color: #00ffff;">defun</span> <span style="color: #87cefa;">alist-get</span> (key alist)
<span class="linenr"> 2: </span>  <span style="color: #ffa07a;">"Get the value associated to KEY in ALIST."</span>
<span class="linenr"> 3: </span>  (<span style="color: #00ffff;">declare</span>
<span class="linenr"> 4: </span>   (gv-expander
<span class="linenr"> 5: </span>    (<span style="color: #00ffff;">lambda</span> (<span style="color: #00ffff;">do</span>)
<span class="linenr"> 6: </span>      (macroexp-let2 macroexp-copyable-p k key
<span class="linenr"> 7: </span>        (gv-letplace (getter setter) alist
<span class="linenr"> 8: </span>          (macroexp-let2 nil p `(assoc ,k ,getter)
<span class="linenr"> 9: </span>            (funcall do `(cdr ,p)
<span class="linenr">10: </span>                     (<span style="color: #00ffff;">lambda</span> (v)
<span class="linenr">11: </span>                       `(<span style="color: #00ffff;">if</span> ,p (setcdr ,p ,v)
<span class="linenr">12: </span>                          ,(funcall setter
<span class="linenr">13: </span>                                    `(cons (cons ,k ,v) ,getter)))))))))))
<span class="linenr">14: </span>          (cdr (assoc key alist)))
</pre>
</div>

<p>
上記は一見複雑だが、重要なのは以下の３点である。
</p>

<ul class="org-ul">
<li>汎変数にしたい関数は、関数定義内で <code>(declare (gv-expander (lambda
  (do) &#x2026;)))</code> を宣言するか、または関数定義外で <code>(put 'func
  'gv-expander (lambda (do arg1 arg2 &#x2026;) &#x2026;))</code> で汎変数関数を設定する。
  [fn:: ~declare~ 経由で汎変数関数を設定する場合、 ~do~ 以外の引数の追
  加は ~gv&#x2013;defun-declaration~ が自動的に行なってくれる。]
</li>

<li>汎変数関数は、関数 <code>do</code> と 元関数の引数を引数にとる。そして汎変数関
数の中では <code>do</code> の引数の形で、 <code>setter</code> 処理を行う式を出力するコード
と <code>getter</code> 処理を行う式を出力するコードを記述する。上記の例では
<code>getter</code> は <code>`(cdr ,p)</code> で、 <code>setter</code> は <code>(lambda (v) `(if
  (&#x2026;.getter)))</code> となる。その際、 <code>setter</code> の中に <code>getter</code> を記述して
も構わない。
</li>

<li><code>(gv-letplace (setter getter) place body)</code> は、上記のように書かれた汎
変数関数に対して、 <code>place</code> リストの最初の要素の関数に対応する汎変数関
数の <code>getter</code> 関数と <code>setter</code> 関数を取り出して、それぞれをシンボル
<code>setter</code> <code>getter</code> に束縛する。
</li>
</ul>

<p>
この方式は、かなり洗練されていて面白い。Emacsの汎変数がこのような形で設
計されているのは以下の理由による。
</p>

<ul class="org-ul">
<li><code>setter</code> プログラムと <code>getter</code> プログラムを同一関数内で記述することで、
構文スコープ下で両機能で変数を共有でき（クロージャ）、互いにネストし
たり副作用を与えられる自由度の高いコードがかける。
</li>

<li>マクロで記述しているので高速化ができる。特にEmacsの汎変数の根幹であ
る <code>gv-get</code> マクロは事実上コンパイラになっている。
</li>
</ul>

<p>
この <code>do</code> にどのような関数を入れるのかは、アプリケーションによって異な
る。たとえば <code>setf</code> は、 <code>do</code> 関数として、 <code>setter/getter</code> 両引数のうち
<code>setter</code> のみを呼び出して汎変数に引数の式を入れる。また <code>gv-letplace</code>
は、 <code>do</code> として引数の <code>setter</code> と <code>getter</code> をそのまま <code>(setter
getter)</code> に紐づける <code>lambda</code> 関数を使っている。
</p>

<p>
上記の例である <code>alist-get</code> は、cl.el の <code>cl-assoc</code> と同じ機能を持つ関
数である。 <code>gv-expander</code> で設定される関数は、関数 <code>do</code>, 位置 <code>key</code>, 構
造 <code>alist</code> を引数とする。
</p>

<p>
<code>(macroexp-let2 macroexp-copyable-p k key &#x2026;)</code>
により、引数 <code>key</code> がコピーされて、 <code>k</code> に代入される。
</p>

<p>
<code>(gv-letplace (setter getter) alist &#x2026;)</code> は、 <code>alist</code> の最初の要素（
当然 <code>alist-get</code> となる）に対応する汎変数関数（すなわち自分自身）
に対して、その値を操作する２関数 <code>getter</code> と <code>setter</code> （すなわち自分自
身の <code>getter</code> と <code>setter</code> プログラム）を取り出す。 <code>getter</code> は現在の
<code>key</code> での <code>alist-get</code> の値を返し、 <code>setter</code> は引数の値を <code>alist</code> に入
れる。
</p>

<p>
<code>(macroexp-let2 nil p `(assoc ,k ,getter) &#x2026; )</code> で、 <code>p</code> に <code>alist</code> の
<code>k</code> 対応値（Consセル）が入る。
</p>

<p>
<code>setf</code> が実行されると、 <code>setf</code> 内の <code>do</code> 関数は２つめのの引数の
<code>setter</code> を使って値を代入し、結果として得られる式を評価する。
</p>

<p>
以下は実行例。
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(setq a '((<span style="color: #ffa07a;">"a"</span> . <span style="color: #ffa07a;">"b"</span>) (<span style="color: #ffa07a;">"c"</span> . <span style="color: #ffa07a;">"d"</span>)))
(alist-get <span style="color: #ffa07a;">"a"</span> a) &#8594; <span style="color: #ffa07a;">"b"</span>
(setf (alist-get <span style="color: #ffa07a;">"a"</span> a) <span style="color: #ffa07a;">"q"</span>)
(alist-get <span style="color: #ffa07a;">"a"</span> a) &#8594; <span style="color: #ffa07a;">"b"</span> &#8594; <span style="color: #ffa07a;">"q"</span>
</pre>
</div>

<p>
Emacsの汎変数を記述する gv.el は、コンパイラやモナドに通じる興味深いコー
ドとなっている。
</p>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" name="fn.1" class="footnum" href="#fnr.1">1</a></sup> <p><code>declare</code> 経由で汎変数関数を設定する場合、 <code>do</code> 以外の引数の追
  加は <code>gv&#x2013;defun-declaration</code> が自動的に行なってくれる。</p></div>


</div>
</div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dired のソート順のカスタマイズ]]></title>
    <link href="http://kawabata.github.com/blog/2013-03-13-dired-sort.html"/>
    <updated>2013-03-13T23:00:00+09:00</updated>
    <id>http://kawabata.github.com/blog/dired-sort</id>
    <content type="html"><![CDATA[<div id="outline-container-1" class="outline-2">
<h2 id="sec-1">Dired におけるファイル名の順番</h2>
<div class="outline-text-2" id="text-1">
<p>
Emacs の ファイルブラウザ dired では、ファイルの並び順を &#8220;s&#8221; キーで切り
替える。
</p>

<p>
切り替え順をアルファベット順・日付順の他にサイズ順やファイルの種類順で
切り替えられるようにする。
</p>
</div>
</div>
<div id="outline-container-2" class="outline-2">
<h2 id="sec-2">GNU ls のインストール</h2>
<div class="outline-text-2" id="text-2">
<p>
Mac に標準で付属する &#8220;ls&#8221; 命令は、ファイルを種類順で並び替えることがで
きない (-Xオプション)。MacPorts 等で、GNU ls をインストールする。
</p>

<pre class="example">
% sudo port install coreutils +with_default_names
</pre>

<p>
オプション <code>+with_default_names</code> を付けておかないと、ls命令は &#8220;gls&#8221; 命
令としてインストールされる。glsの方が良い場合は init.el に以下のように
書く。
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #00ffff;">when</span> (executable-find <span style="color: #ffa07a;">"gls"</span>)
  (setq insert-directory-program <span style="color: #ffa07a;">"gls"</span>))
</pre>
</div>
</div>
</div>
<div id="outline-container-3" class="outline-2">
<h2 id="sec-3">dired の sort命令の拡張</h2>
<div class="outline-text-2" id="text-3">
<p>
以下に、 <code>dired-toggle-sort</code> を拡張した、 <code>dired-rotate-sort</code> を示す。
この命令で、 <code>dired-mode-map</code> の &#8220;s&#8221; キーバインドを置き換える。これで
&#8220;s&#8221;キーを押すたびに、diredのファイルの並び順を アルファベット順・更新
時間順・拡張子順・サイズ順に切り替わる。
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp"><span style="color: #ff7f24;">;; </span><span style="color: #ff7f24;">dired &#12398; sort &#12434;&#25313;&#24373;&#12377;&#12427;&#12290;</span>
(<span style="color: #00ffff;">defvar</span> <span style="color: #eedd82;">dired-sort-order</span> '(<span style="color: #ffa07a;">""</span> <span style="color: #ffa07a;">"t"</span> <span style="color: #ffa07a;">"S"</span> <span style="color: #ffa07a;">"X"</span>)
  <span style="color: #ffa07a;">"-t (&#26178;&#38291;) -X (&#25313;&#24373;&#23376;) -S (&#12469;&#12452;&#12474;) &#12394;&#12375; (&#12450;&#12523;&#12501;&#12449;&#12505;&#12483;&#12488;&#38918;) &#12434;&#20999;&#12426;&#26367;&#12360;&#12427;&#12290;"</span>)
(<span style="color: #00ffff;">defvar</span> <span style="color: #eedd82;">dired-sort-order-position</span> 0)

(<span style="color: #00ffff;">defun</span> <span style="color: #87cefa;">dired-rotate-sort</span> ()
  <span style="color: #ffa07a;">"Rotate dired toggle sorting order by `</span><span style="color: #ffa07a;">dired-sort-order</span><span style="color: #ffa07a;">'"</span>
  (interactive)
  (setq dired-sort-order-position
        (% (1+ dired-sort-order-position) (length dired-sort-order)))
  (setq dired-actual-switches
        (concat dired-listing-switches (elt dired-sort-order
                                          dired-sort-order-position)))
  (dired-sort-other dired-actual-switches))
(define-key dired-mode-map <span style="color: #ffa07a;">"s"</span> 'dired-rotate-sort)
</pre>
</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs 24.3 雑感]]></title>
    <link href="http://kawabata.github.com/blog/2013-03-12-emacs23.html"/>
    <updated>2013-03-12T23:00:00+09:00</updated>
    <id>http://kawabata.github.com/blog/emacs23</id>
    <content type="html"><![CDATA[<p>
Emacs 24.3 リリース直後に山本光晴さんがMac用のパッチを公開してくださり、
それをEmacsのソースコードにあてたgitレポジトリを<a href="https://github.com/railwaycat/emacs-mac-port">公開</a> してくれている方
もいる。
</p>

<pre class="example">
% git clone https://github.com/railwaycat/emacs-mac-port
% cd emacs-mac-port
% ./configure --with-mac --enable-profiling --enable-mac-app
% make -j CC="/usr/bin/gcc -std=gnu99" CFLAGS=-g3 bootstrap
</pre>

<p>
以下雑感。
</p>

<div id="outline-container-1" class="outline-2">
<h2 id="sec-1">cl-lib</h2>
<div class="outline-text-2" id="text-1">
<p>
cl.el は従来、Emacsの内部関数と衝突するため、標準配布パッケージではマ
クロ以外の利用が禁止されている。Emacs 24.3の cl-lib パッケージは、
clの関数の名前空間をEmacsから分離して提供する。
</p>

<p>
cl-lib を使えば、一般のパッケージで堂々とcl 関数を利用できる。ただし、
例えば <code>remove-if</code> 関数は、 <code>cl-remove-if</code> と先頭に &#8220;cl-&#8221; をつける。
</p>

<p>
Emacsとclで関数名が衝突するのは、clの便利な関数をEmacs本体がサブセット
の形で取り込んでいった( <code>dolist</code> など)から。clパッケージの誕生から20年、
ようやく安心して共存できるようになった。
</p>

<p>
Emacs 24.2 以前のユーザでも cl-lib が利用できるよう、互換パッケージが
MELPAに用意されている。逆に Emacs 24.3 ユーザはこの cl-lib をインストー
ルしてはいけない。
</p>

<p>
clのマクロは相変わらず、 <code>(eval-when-compile (require 'cl))</code> とすれば
利用できる。
</p>
</div>
</div>
<div id="outline-container-2" class="outline-2">
<h2 id="sec-2">pcase.el</h2>
<div class="outline-text-2" id="text-2">
<p>
Emacs 24.2 から導入された pcase が最近、どんどん使われている。やはり
<code>cconv.el</code> でその威力で知った人が多かったのか。
</p>

<p>
<code>pcase</code> の単純な使い方として、文字列版 <code>case</code> として使う方法がある。
</p>

<p>
従来の <code>case</code> 文は以下のように <code>eq</code> でしか比較できないけど、
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #00ffff;">case</span> var
  ('symb1 ....)
  ('symb2 ....)
  ....)
</pre>
</div>

<p>
<code>pcase</code> 文は <code>equal</code> での比較ができるので、以下のような分岐が書ける。
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #00ffff;">pcase</span> var
  (<span style="color: #ffa07a;">"str1"</span> ....)
  (<span style="color: #ffa07a;">"str2"</span> ....)
  ....)
</pre>
</div>
</div>
</div>
<div id="outline-container-3" class="outline-2">
<h2 id="sec-3">汎変数</h2>
<div class="outline-text-2" id="text-3">
<p>
Emacs 本体に、汎変数が導入され、 <code>setf</code> もEmacs本体に組み込まれた。
</p>

<p>
従来の変数や setq が、シンボルを変数としたのに対して、汎変数やsetfは構
造を変数にする。構造を作ったり (construct) 、構造を分解することが統一
表記で記述できるので、上手く使えば簡潔でわかりやすいelispが書ける。
</p>
</div>
</div>
<div id="outline-container-4" class="outline-2">
<h2 id="sec-4">全体としてみると</h2>
<div class="outline-text-2" id="text-4">
<p>
今回のリリースはバグ修正（特にメモリ関係）が多く、目立つ機能はあまり入っ
ていない。特に多言語機能。MULE が6.0（花散里）になって、ちょうど10年に
なる。
</p>

<p>
ただし汎変数は非常に興味深いので、後日追記予定。
</p>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs Lookup で字通を読む]]></title>
    <link href="http://kawabata.github.com/blog/2013-03-11-jitsuu.html"/>
    <updated>2013-03-11T23:00:00+09:00</updated>
    <id>http://kawabata.github.com/blog/jitsuu</id>
    <content type="html"><![CDATA[<p>
<a href="http://www.tranradar.net/cd-jitsuu.html">字通 </a>は白川静の辞書３部作の最高峰。書籍版は重いし価格も23,000円と高いが、
CD-ROM版なら安いしHDDにコピーできてノートパソコンで持ち歩ける。
</p>

<p>
Emacsの<a href="http://lookup2.github.com">Lookup</a> には字通CD-ROMを読むための検索エージェント <code>ndjitsuu</code> がある。
</p>

<div id="outline-container-1" class="outline-2">
<h2 id="sec-1">インデックスファイルの作成</h2>
<div class="outline-text-2" id="text-1">
<p>
「字通」を検索するためには、インデックスファイルを事前に作成する必要が
ある。lookup のmisc フォルダに入っている <code>jitsuu_mk_jukugo_list.rb</code> と
<code>jitsuu_mk_oyaji_list.rb</code> を使って、インデックスファイルを作成する。
</p>

<pre class="example">
% cd ~/edicts/Jitsuu/DATA/
% ruby jitsuu_mk_oyaji_list.rb &gt; oyaji.txt
% ruby jitsuu_mk_jukugo_list.rb &gt; jukugo.txt
</pre>

<p>
次に、生成された <code>oyaji.txt</code> と <code>jukugo.txt</code> の外字をUCS漢字コードに置
換する。
</p>

<pre class="example">
M-x find-file oyaji.txt
M-x ndjitsuu-convert-gaiji-to-ucs
M-x save-buffer

M-x find-file jukugo.txt
M-x ndjitsuu-convert-gaiji-to-ucs
M-x save-buffer
</pre>

<p>
<code>oyaji.txt</code> と <code>jukugo.txt</code> は DATAフォルダと同じ位置に置く。
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(setq lookup-search-agents
      `(...
        (ndjitsuu <span style="color: #ffa07a;">"~/edicts/Jitsuu"</span>)
        ...))
</pre>
</div>

<p>
<code>lookup-search-agents</code> 変数に <code>ndjitsuu</code> を加えて、 <code>M-x lookup-restart</code> すれ
ば字通をEmacsで読めるようになる。
</p>


<div class="figure">
<p><img src="2013-03-11-jitsuu.png"  alt="2013-03-11-jitsuu.png"/></p>
</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs Lookup でオフラインでWikipediaを検索する]]></title>
    <link href="http://kawabata.github.com/blog/2013-03-10-ndzim.html"/>
    <updated>2013-03-10T23:00:00+09:00</updated>
    <id>http://kawabata.github.com/blog/ndzim</id>
    <content type="html"><![CDATA[<div id="outline-container-1" class="outline-2">
<h2 id="sec-1">Lookup の ndzim エージェント</h2>
<div class="outline-text-2" id="text-1">
<p>
<a href="http://lookup2.github.com/">Lookup</a> で <a href="http://openzim.org">OpenZIM</a> 形式のファイルを検索するための <code>ndzim</code> エージェン
トを試作した。
</p>
</div>
</div>
<div id="outline-container-2" class="outline-2">
<h2 id="sec-2">OpenZIM について</h2>
<div class="outline-text-2" id="text-2">
<p>
<a href="http://openzim.org">OpenZIM</a> ファイル形式は、複数のWebページや付随する画像データを、整理・圧
縮して１ファイルにまとめる。主に Wikipedia 等の MediaWiki の記事をアー
カイブするために開発されている。[fn:: Wikipedia 財団が公認している。]
</p>

<p>
OpenZIM の<a href="http://www.openzim.org/wiki/ZIM_file_format">内部構造</a> は、LZMA2で圧縮された多数のデータの集合体である。日
本語版Wikipediaの全記事（2011年現在）を画像込みで 7GByte、英語版
Wikipediaを画像なしで 12GByte 程度に圧縮できる。様々な言語のWikipeida 全
記事をアーカイブした OpenZIMファイルがKiwixサイトにて<a href="http://www.kiwix.org/wiki/Wikipedia_in_all_languages">配布</a>されている。
</p>
</div>
</div>
<div id="outline-container-3" class="outline-2">
<h2 id="sec-3">ZimLibのインストール</h2>
<div class="outline-text-2" id="text-3">
<p>
Lookup の ndzim エージェントは、<a href="https://gerrit.wikimedia.org/r/p/openzim.git">zimlib</a> に付属するzimdump/zimsearch ツー
ルでOpenZIMファイルの検索とデータのダンプを行い、w3mで整形する。
</p>

<p>
zimlib のコンパイルには lzma ライブラリが別途必要。MacPorts等でlzmaラ
イブラリをインストールする場合は、CPPFLAGSやLDFLAGS環境変数を適切に設
定する。 
</p>

<pre class="example">
% git clone https://gerrit.wikimedia.org/r/p/openzim.git
% cd cd openzim/zimlib
% ./autogen.sh
% ./configure
% make
% sudo make install
</pre>
</div>
</div>
<div id="outline-container-4" class="outline-2">
<h2 id="sec-4">Lookup の設定</h2>
<div class="outline-text-2" id="text-4">
<p>
Lookup で OpenZIMを使うためには、 <code>$HOME/.emacs.d/lookup/init.el</code> に、
ZIMファイルを入れたディレクトリを検索エージェントとして設定する。
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(setq lookup-search-agents
      '(...
        (ndzim <span style="color: #ffa07a;">"/path/to/dir"</span>)
       ))
</pre>
</div>

<p>
上記のように設定すると、検索エージェントは <code>/path/to/dir</code> ディレクトリ
内にある、拡張子が <code>.zim</code> のファイルを見つける。
</p>

<p>
あとは他のエージェントと同様、 <code>M-x lookup-restart</code> にて、無事に辞書選
択バッファに辞書が表示されたら、単語で検索して動作を確認。
</p>


<div class="figure">
<p><img src="2013-03-10-ndzim.png"  alt="2013-03-10-ndzim.png"/></p>
<p>検索サンプル</p>
</div>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" name="fn.1" class="footnum" href="#fnr.1">1</a></sup> <p>Wikipedia 財団が公認している。</p></div>


</div>
</div>]]></content>
  </entry>
  
</feed>
